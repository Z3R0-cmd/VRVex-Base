{"mode":"Text","textContent":"myVariable = 0\nSpazzVar = 0\npi = 0\nFull_Rotation = 0\none_turn = 0\nspace = 0\nSetup = False\n\ndef Setup2():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    # This is the setup method, You will need to run this at the beginning of your code/blocks\n    pi = 3.141592653589793\n    Full_Rotation = 360\n    one_turn = 90\n    Setup = True\n    space = 200\n\ndef Continue_moving_forward_for_seconds_seconds_(Continue_moving_forward_for_seconds_seconds___seconds):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    brain.timer_reset()\n    while not Continue_moving_forward_for_seconds_seconds___seconds == brain.timer_time(SECONDS):\n        Go_Forward_1_Step()\n        wait(5, MSEC)\n\ndef Completely_Spazz_out():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    while True:\n        SpazzVar = random.randint((1 - 1), 10)\n        if SpazzVar == 1:\n            Go_Forward_1_Step()\n            Turn_Right()\n            Go_Backwards_1_Step()\n        if SpazzVar == 2:\n            Go_Forward_1_Step()\n            Go_Forward_1_Step()\n            Go_Backwards_1_Step()\n            Go_Forward_1_Step()\n            Turn_Right()\n            Go_Forward_1_Step()\n        if SpazzVar == 3:\n            Turn_Right()\n            Go_Backwards_1_Step()\n            Turn_Left()\n            Go_Forward_1_Step()\n        if SpazzVar == 4:\n            Turn_Left()\n            Go_Forward_1_Step()\n            Go_Forward_1_Step()\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n        if SpazzVar == 5:\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n        if SpazzVar == 6:\n            Turn_Left()\n            Turn_Left()\n            Turn_Left()\n        if SpazzVar == 7:\n            Go_Backwards_1_Step()\n        if SpazzVar == 8:\n            Go_Forward_1_Step()\n        if SpazzVar == 9:\n            Go_Forward_1_Step()\n            Turn_Left()\n            Go_Backwards_1_Step()\n        if SpazzVar == 50:\n            Turn_Left()\n            Turn_Left()\n            Turn_Left()\n            Turn_Left()\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n            Turn_Right()\n        wait(0.25, SECONDS)\n        wait(5, MSEC)\n\ndef Turn_degrees_degrees_left_after_seconds_seconds(Turn_degrees_degrees_left_after_seconds_seconds__degrees, Turn_degrees_degrees_left_after_seconds_seconds__seconds):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    wait(Turn_degrees_degrees_left_after_seconds_seconds__seconds, SECONDS)\n    drivetrain.turn_for(LEFT, Turn_degrees_degrees_right_after_seconds_seconds__degrees, DEGREES)\n\ndef Turn_Right():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    drivetrain.turn_for(RIGHT, one_turn, DEGREES)\n\ndef SetColorByColorCode_Color_Code(SetColorByColorCode_Color_Code__Color_Code):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    if SetColorByColorCode_Color_Code__Color_Code == 1:\n        # RED\n        brain.set_print_color(RED)\n    if SetColorByColorCode_Color_Code__Color_Code == 2:\n        # BLUE\n        brain.set_print_color(BLUE)\n    if SetColorByColorCode_Color_Code__Color_Code == 3:\n        # GREEN\n        brain.set_print_color(GREEN)\n    if SetColorByColorCode_Color_Code__Color_Code == 4:\n        # BLACK\n        brain.set_print_color(BLACK)\n\ndef Turn_Left():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    drivetrain.turn_for(LEFT, one_turn, DEGREES)\n\ndef Go_Backwards_1_Step():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    drivetrain.drive_for(REVERSE, space, MM)\n\ndef Move_Foward_spaces_spaces(Move_Foward_spaces_spaces__spaces):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    drivetrain.drive_for(FORWARD, (Move_Foward_spaces_spaces__spaces * space), MM)\n\ndef Shutdown():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    stop_project()\n\ndef Go_Forward_1_Step():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    drivetrain.drive_for(FORWARD, space, MM)\n\ndef Continue_going_forward_forever():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    while True:\n        drivetrain.drive(FORWARD)\n        wait(5, MSEC)\n\ndef Wait_minutes_minutes(Wait_minutes_minutes__minutes):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    wait((Wait_minutes_minutes__minutes * 60), SECONDS)\n\ndef Quit_driving_after_seconds_Seconds(Quit_driving_after_seconds_Seconds__seconds):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    wait(Quit_driving_after_seconds_Seconds__seconds, SECONDS)\n    drivetrain.stop()\n\ndef Turn_degrees_degrees_right_after_seconds_seconds(Turn_degrees_degrees_right_after_seconds_seconds__degrees, Turn_degrees_degrees_right_after_seconds_seconds__seconds):\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    wait(Turn_degrees_degrees_right_after_seconds_seconds__seconds, SECONDS)\n    drivetrain.turn_for(RIGHT, Turn_degrees_degrees_right_after_seconds_seconds__degrees, DEGREES)\n\ndef when_started1():\n    global myVariable, SpazzVar, pi, Full_Rotation, one_turn, space, Setup\n    Setup2()\n\nvr_thread(when_started1())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"Grid"}